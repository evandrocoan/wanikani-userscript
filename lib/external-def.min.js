(() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };

  // src/js/external-def.ts
  function fixUrl(el, baseUrl) {
    el.querySelectorAll("a").forEach((a) => {
      a.href = new URL(a.href, baseUrl).href;
    });
    el.querySelectorAll("img").forEach((img) => {
      img.src = new URL(img.src, baseUrl).href;
    });
  }
  async function parseJapanese(q, getFunction) {
    let result = {};
    if (q.length === 1) {
      result = await parseKanjipedia(q, getFunction);
    }
    const weblio = await parseWeblio(q, getFunction);
    result = __spreadValues(__spreadValues({}, result), weblio);
    return result;
  }
  async function parseKanjipedia(q, getFunction) {
    const urlBase = "https://www.kanjipedia.jp/";
    const elHtml = document.createElement("div");
    elHtml.innerHTML = await getFunction(`${urlBase}search?k=${encodeURIComponent(q)}&kt=1&sk=leftHand`);
    const firstResult = elHtml.querySelector("#resultKanjiList a");
    if (!firstResult) {
      return {
        kanjipedia: [],
        kanjipediaUrl: ""
      };
    }
    const trueUrl = new URL(new URL(firstResult.href, urlBase).pathname, urlBase).href;
    elHtml.innerHTML = await getFunction(trueUrl);
    fixUrl(elHtml, urlBase);
    return {
      kanjipedia: Array.from(elHtml.querySelectorAll("#kanjiRightSection p")).map((p) => p.innerHTML),
      kanjipediaUrl: trueUrl
    };
  }
  async function parseWeblio(q, getFunction) {
    const url = "https://www.weblio.jp/content/" + encodeURIComponent(q);
    const elHtml = document.createElement("div");
    elHtml.innerHTML = await getFunction(url);
    fixUrl(elHtml, "https://www.weblio.jp");
    return {
      weblio: Array.from(elHtml.querySelectorAll(".kiji")).map((el) => el.innerHTML.trim()).filter((el) => el),
      weblioUrl: url
    };
  }
  window.external_definition = { parseJapanese };

  // src/external/external-def.ts
  var lookupMap = /* @__PURE__ */ new Map();
  $(() => {
    updateInfo();
    $.jStorage.listenKeyChange("currentItem", function() {
      updateInfo();
    });
  });
  var observer = new MutationObserver(function(mutations) {
    let doUpdate = false;
    mutations.forEach(function(mutation) {
      mutation.addedNodes.forEach((node) => {
        if (node instanceof HTMLElement && node.matches("#item-info-meaning-mnemonic, #supplement-voc-meaning, #supplement-kan-meaning, #information")) {
          doUpdate = true;
        }
      });
    });
    if (doUpdate) {
      updateInfo();
    }
  });
  observer.observe(document.body, {
    attributes: true,
    childList: true,
    characterData: true,
    subtree: true
  });
  async function scrape(url) {
    return new Promise((resolve, reject) => {
      GM_xmlhttpRequest({
        method: "GET",
        url,
        onload: (data) => {
          resolve(data.responseText);
        },
        onerror: (data) => {
          reject(data.statusText);
        }
      });
    });
  }
  async function updateInfo() {
    const word = (() => {
      const m = /wanikani\.com\/(?:kanji|vocabulary)\/(.+)$/.exec(location.href);
      if (m) {
        return decodeURIComponent(m[1].replace(/する$/, ""));
      }
      const it = $.jStorage.get("currentItem");
      return it.kan || it.voc;
    })();
    if (!word) {
      return;
    }
    const { kanjipedia, kanjipediaUrl, weblio, weblioUrl } = lookupMap.get(word) || await parseJapanese(word, scrape);
    lookupMap.set(word, { kanjipedia, kanjipediaUrl, weblio, weblioUrl });
    const $dialog = $('<div id="external-def">');
    const $meanings = $("#item-info-meaning-mnemonic, #supplement-voc-meaning, #supplement-kan-meaning");
    if ($meanings.length > 0) {
      $meanings.prepend($dialog);
    } else {
      $("#information").append($dialog);
    }
    if (kanjipedia) {
      const $kanjipedia = $('<section class="kanjipedia"></section>');
      $dialog.append($kanjipedia);
      if ($.jStorage.get("questionType") === "reading")
        $(".kanjipedia").css("display", "none");
      $kanjipedia.html(kanjipedia + '<br><a href="' + kanjipediaUrl + '" target="_blank">Click for full entries</a>');
      $kanjipedia.prepend("<h2>Kanjipedia Explanation</h2>");
    }
    if (weblio.length > 0) {
      const $weblio = $('<section class="weblio"></section>');
      $dialog.append($weblio);
      if ($.jStorage.get("questionType") === "reading")
        $(".weblio").css("display", "none");
      $weblio.html("");
      weblio.map((w) => {
        $weblio.append(w);
      });
      $weblio.append('<br><a href="' + weblioUrl + '" target="_blank">Click for full entries</a>');
      $weblio.prepend("<h2>Weblio Explanation</h2>");
    }
  }
  try {
    $(".app-store-menu-item").remove();
    $('<li class="app-store-menu-item"><a href="https://community.wanikani.com/t/there-are-so-many-user-scripts-now-that-discovering-them-is-hard/20709">App Store</a></li>').insertBefore($('.navbar .dropdown-menu .nav-header:contains("Account")'));
    window.appStoreRegistry = window.appStoreRegistry || {};
    window.appStoreRegistry[GM_info.script.uuid] = GM_info;
    localStorage.appStoreRegistry = JSON.stringify(appStoreRegistry);
  } catch (e) {
  }
})();
